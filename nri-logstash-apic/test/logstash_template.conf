input {
        tcp {
                #port => 5959
                port => !!!PORT!!!
                codec => json
        }
}

filter {
	ruby {
                code => "
                        headers_array = event.get('request_http_headers')

                        if headers_array
                                headers_array.each do |req_header|
                                        req_header.each do |key,value|
                                                event.set('rq_headers.' + key, value)
                                        end
                                end
                        end
                "
        }

        # Distrubuited tracing
        # If parentId and traceId exist
	if [rq_headers.parentId] and [rq_headers.traceId] {

                clone {
                        clones => ['clone_for_trace', "logs"]
                }

                if [type] == 'clone_for_trace' {

                        ruby {
                                code => "
                                        require 'json'

                                        traceId = event.get('rq_headers.traceId')
                                        parentId = event.get('rq_headers.parentId')

                                        latency_info = event.get('latency_info')
                                        latency_total = latency_info[-1]['started']
                                        time_to_serve_request = event.get('time_to_serve_request')
                                        total_ms = latency_total + time_to_serve_request

                                        nr_data = [ {
                                                'common' => {
                                                        'attributes' => {
                                                                'service.name' => event.get('api_name') + '-apic'
                                                        }
                                                },
                                                'spans' => [ {
                                                        'trace.id' => traceId,
                                                        'id' => id,
                                                        'attributes' => {
                                                                'duration.ms' => total_ms,
                                                                'parent.id' => parentId,
                                                                'name' => event.get('uri_path')
                                                        }
                                                } ]
                                        } ]

                                        event.set('nr_data', nr_data.to_json)
                                "
                        }

                        prune {
                                whitelist_names => [ "nr_data" ]
                        }

                        mutate {
                                add_field => { "[@metadata][type]" => "clone_for_trace" } 
                        }
                }

                 # Prepare data to be sent to New Relic Logs
                if [type] == 'logs' {

                         prune {
                                #whitelist_names => [ 
                                #        "datetime",
                                #        "api_name",
                                #        "api_version",
                                #        "rq_headers.trace-id",
                                #        "status_code", 
                                #        "time_to_serve_request", 
                                #        "uri_path" ]
                                whitelist_names => [!!!WHITELIST!!!]
                        }

                        mutate {
                                add_field => { "[@metadata][type]" => "logs" } 
                        }
                }
        }
}

output {

        #Send data - Distrubuited tracing - Uses New Relic API
        if [@metadata][type] == 'clone_for_trace' {
 
                if "!!!DEBUG!!!" == "true" {
                        stdout { codec => rubydebug }
                }

                http {
                        url => "https://trace-api.newrelic.com/trace/v1"
                        content_type => "application/json"  
                        http_method => "post"
                        headers => {
                                "Api-Key" => "!!!API_KEY!!!"
                                "Data-Format" => "newrelic"
                                "Data-Format-Version" => 1
                        }
                        format => "message"
                        message => "%{nr_data}"
                }
        }

        # Send data - Logs - Uses New Relic input for logstash
        if [@metadata][type] == 'logs' {

                if "!!!DEBUG!!!" == "true" {
                        stdout { codec => rubydebug }
                }
                
                newrelic {
                        api_key => "!!!API_KEY!!!"
                }
        }
}


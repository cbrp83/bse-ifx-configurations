input {
        http {
                port => !!!PORT!!!
        }
}

filter {
        ruby {
          code => "

                if event.get('sendt') == 'S' || event.get('sendl') == 'S' 

                  require 'json'
                  require 'time'
                  
                  globalId = event.get('global_transaction_id')

                  #  <-- obtencion del tiempo del backend en API

                  time_backend =0
                  sw = false
                  latency_info = event.get('latency_info')
                  latency_info.each do |a|
                    if sw 
                      time_backend = a['started'].to_i - time_backend
                      break
                    end
                    if a['task'] == 'assembly-invoke'
                      time_backend = a['started'].to_i
                      sw = true
                    end
                  end 

                  datetime = event.get('datetime')
                  time = Time.parse(datetime)
                  timestamp = (time.to_f * 1000).floor

                  time_to_serve_request = event.get('time_to_serve_request')

                  ibkrec =  event.get('ibkrec')

                  product=''
                  app=''
                  plan=''
                  if  not event.get('product_name').nil?
                    product=event.get('product_name')
                    app=event.get('app_name')
                    plan=event.get('plan_name')
                  end

                  nr_data = [ {
                          'common' => {
                                  'attributes' => {
                                          'service.name' => event.get('api_name') + ':' +  event.get('api_version'), 
                                          'service.namespace' => event.get('org_name'),
                                          'service.version' => event.get('api_version'),
                                          'service.instance.id' => event.get('api_id')
                                  }
                          },
                          'spans' => [ {
                                  'trace.id' => ibkrec['traceId'],
                                  'id' => globalId,
                                  'timestamp' => timestamp,
                                  'attributes' => {
                                          'duration.ms' => time_to_serve_request,
                                          'name' => event.get('uri_path'),
                                          'backend.duration.ms' => time_backend,
                                          'http.path' => event.get('uri_path'),
                                          'http.method' => event.get('request_method'),
                                          'kind' => 'consumer',
                                          'product' => product,
                                          'catalog' => event.get('catalog_name'),
                                          'app' => app,
                                          'plan' => plan,
                                          'errfunc' => event.get('errfunc')
                                  }
                          } ]
                  } ]

                  if ibkrec
                    #ibkrec.each do |key,value|
                    #  nr_data[0]['spans'][0]['attributes']['@' + key]=value
                    #end

                    ibkrecstatus =  event.get('ibkrecstatus')
                    nr_data[0]['spans'][0]['attributes']['otel.status_code']='OK'
                    nr_data[0]['spans'][0]['attributes']['status_code']=ibkrecstatus['code']
                    nr_data[0]['spans'][0]['attributes']['reason']=ibkrecstatus['reason']


                    ibkrecerror =  event.get('ibkrecerror')

                    if ibkrecerror
                      nr_data[0]['spans'][0]['attributes']['otel.status_code']='ERROR'
                      nr_data[0]['spans'][0]['attributes']['otel.status_description']=ibkrecerror['errorMessage']
                      nr_data[0]['spans'][0]['attributes']['error.name']=ibkrecerror['errorName']
                      nr_data[0]['spans'][0]['attributes']['error.message']=ibkrecerror['errorMessage']
                      nr_data[0]['spans'][0]['attributes']['error.status_code']=ibkrecstatus['code']
                      nr_data[0]['spans'][0]['attributes']['error.reason']=ibkrecstatus['reason']
                    end

                  else # <-- Errores generados antes de entrar al API                      

                      nr_data[0]['spans'][0]['attributes']['otel.status_code']='ERROR'
                      nr_data[0]['spans'][0]['attributes']['otel.status_description']=event.get('status_code')
                      nr_data[0]['spans'][0]['attributes']['error.name']='error'
                      nr_data[0]['spans'][0]['attributes']['error.message']=event.get('status_code')
                      nr_data[0]['spans'][0]['attributes']['error.status_code']=event.get('status_code')
                      nr_data[0]['spans'][0]['attributes']['error.reason']=event.get('status_code')
                      status= event.get('status_code').split(/ /,2)
                      nr_data[0]['spans'][0]['attributes']['status_code']=status[0]
                      nr_data[0]['spans'][0]['attributes']['reason']=status[1]

                  end

                  event.set('nr_data', nr_data.to_json)

                end

                if event.get('sendl') == 'S' 

                  #  <-- Armado del mensaje Log
                  nr_data_log = [ {
                                'common' => {
                                  'attributes': {
                                    'service.name' => event.get('api_name') + ':' +  event.get('api_version'), 
                                    'service.namespace' => event.get('org_name'),
                                    'service.version' => event.get('api_version'),
                                    'service.instance.id' => event.get('api_id'),
                                    'level' => 'apievent',
                                    'hostname' => event.get('host')
                                  }
                                },
                                'logs' => [ {
                                    'timestamp' => timestamp,
                                    'trace.id' => ibkrec['traceId'],
                                    'id' => globalId,
                                    'attributes' => {
                                      'name' => event.get('uri_path')
                                    }
                                  } ]
                                } ]
                  if ibkrec
                    ibkrec.each do |key,value|
                      nr_data_log[0]['logs'][0]['attributes']['@' + key]=value
                    end
                  end     

                  event.set('nr_data_log', nr_data_log.to_json)

                end
                    
          "
        }

        mutate {
            add_field => { "[@metadata][sendt]" => "%{sendt}" } 
            add_field => { "[@metadata][sendl]" => "%{sendl}" } 
        }

        prune {
            whitelist_names => [ "nr_data","nr_data_log"]
        }
}

output {

        if "!!!DEBUG_ALL!!!" == "true" {
                stdout { codec => rubydebug }
        }

        if ([@metadata][sendt]=='S'){
          http {
            url => "https://trace-api.newrelic.com/trace/v1"
            http_method => "post"
            codec => "json"
            content_type => "application/json"
            id => "offload_http_trace"
            format => "message"
            message => "%{nr_data}"       
			headers => {
					"Api-Key" => "!!!API_KEY!!!"
					"Data-Format" => "newrelic"
					"Data-Format-Version" => 1
			}			
			proxy => {
					host => "!!!HTTPS_PROXY_HOST!!!"
					port => "!!!PROXY_PORT!!!"
					scheme => "!!!SCHEMA!!!"
			}
          }
        }

        if ([@metadata][sendl]=='S'){
          http {
            url => "https://log-api.newrelic.com/log/v1"
            http_method => "post"
            content_type => "application/json"
            id => "offload_http_log"
            format => "message"
            message => "%{nr_data_log}"
			headers => {
					"Api-Key" => "!!!API_KEY!!!"
			}			
			proxy => {
					host => "!!!HTTPS_PROXY_HOST!!!"
					port => "!!!PROXY_PORT!!!"
					scheme => "!!!SCHEMA!!!"
			}
          }
        }

}



